#
# This is an example of a high security, somewhat compatible TLSv1
# enabled HTTPS proxy server. The server only allows modes that provide perfect
# forward secrecy; no other modes are offered. Anonymous cipher modes are
# disabled.  This configuation includes the HSTS header to ensure that
# users do not accidentally connect to an insecure HTTP service after their
# first visit. This configuration will automatically redirect all traffic on
# TCP port 80 to TCP port 443. All traffic requested will be redirected through
# a local HTTP proxy. This configuration file is what powers tor2web.com.
#
#  Supported Server Cipher(s):
#    Accepted  TLSv1  256 bits  ECDHE-RSA-AES256-SHA
#    Accepted  TLSv1  256 bits  DHE-RSA-AES256-SHA
#    Accepted  TLSv1  128 bits  DHE-RSA-AES128-SHA
#
#  Prefered Server Cipher(s):
#    TLSv1  256 bits  ECDHE-RSA-AES256-SHA
#
# This configuration requires a modern nginx server linked against openssl, it
# binds to TCP port 443 and TCP port 80, it only logs errors, drops privs from
# root to www-data, and disables the server signature.
#

user www-data;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    # multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;
    #gzip  on;
    #gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    proxy_cache_key                 $scheme$host$request_uri;
    proxy_cache_path                /var/cache/nginx/cached levels=2:2
    keys_zone=global:64m inactive=60m max_size=1G;

    server {
        listen 1.2.3.4:80;
        return 301 https://$host$request_uri;
    }

    server {
        listen 1.2.3.4:443 default ssl;
        ssl_certificate      /etc/nginx/example.com.crt;
        ssl_certificate_key  /etc/nginx/example.com.key;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Only strong ciphers in PFS mode
        ssl_ciphers ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHE-DSS-AES256-SHA:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # For ssl client certificates, edit ssl_client_certificate
        # (specifies a file containing permissable CAs) and uncomment the
        # following:
        #ssl_verify_client optional;
        #ssl_client_certificate /etc/ssl/ca.crt

        server_name  example.com;
        location / {
            # Uncomment to route requests through Tor.
            # proxy_pass  http://127.0.0.1:8118;
            # proxy_set_header Host $server_id.onion;
            # proxy_read_timeout 2000;

            if ($host ~* (.*).example.com) {
                set $server_id $1;
            }
            # 31536000 == 1 year
            add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
            add_header X-Frame-Options DENY;
            proxy_cache global;
            proxy_cache_valid  any 1h;
            proxy_cache_use_stale updating;
        }
    }
}
