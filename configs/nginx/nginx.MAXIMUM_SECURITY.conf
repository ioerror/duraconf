#
# This is an example of an very high security, TLS1.2, AEAD, ECDHE, SHA256+ only 
# enabled HTTPS proxy server :
#
# - This configuration ONLY LISTEN ON TCP port 443.
# - This configuration only allows TLSv1.2 protocol.
# - The server only allows EC modes that provide perfect forward secrecy 
#   using a 384bit prime curve; no other modes are offered (not even DHE).
# - This configuration only allows AEAD (AES-GCM) ciphers, using SHA256, 
#   anonymous and/or weaker cipher modes are disabled.
# - This configuation does include the HSTS header to ensure that
#   users do not accidentally connect to an insecure HTTP service after their
#   first visit. 
# - This configuration includes HPKP basic parameters, pins to be 
#   generated by you. 
# - This configuration includes CSP parameters insuring even static elements 
#   are loaded through TLS. 
# - This configuration includes OCSP stapling. 
#
#
#
#  Supported Server Cipher(s):
#    Accepted  TLSv1.2  256 bits  ECDHE-ECDSA-AES256-GCM-SHA384
#    Accepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-GCM-SHA384
#    Accepted  TLSv1.2  128 bits  ECDHE-ECDSA-AES128-GCM-SHA256
#    Accepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-GCM-SHA256
# 
# This configuration will have a very restricted compatibility list 
# (Java 8+, Win7/IE11, Chrome/FF ESR, Android 4.4.2+)
#
# This configuration requires a modern nginx server linked against openssl, it
# binds to TCP port 443 ONLY, it only logs errors, drops privs from
# root to www-data, and disables the server signature.
#

user www-data;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    # multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;
    #gzip  on;
    #gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    proxy_cache_key                 $scheme$host$request_uri;
    proxy_cache_path                /var/cache/nginx/cached levels=2:2
    keys_zone=global:64m inactive=60m max_size=1G;

# Do NOT listen on port 80, instead have your HSTS preloaded in browsers since redirect can be striped.
server {
    listen 1.2.3.4:443 default ssl;

    # Use SHA256 hashed certificates & if possible ECDSA signatures on a strong curve.
    ssl_certificate      /etc/nginx/example.com.crt;
    ssl_certificate_key  /etc/nginx/example.com.key;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Force strong ECDHE curve.
    ssl_ecdh_curve secp384r1;

    # Only EC & AEAD ciphers in EC PFS mode, no AES-CBC, no DHE, no SHA1
    ssl_ciphers  -AES:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:!DHE:!aNULL:!eNULL:!LOW:!3DES:!DES:!MD5:!EXP:!PSK:!SRP:!DSS:!SHA:!MD4:!RC2:!IDEA:!SEED:!CAMELLIA:!aDH:!AECDH;

    # Only use timing-resistant protocols
    ssl_protocols TLSv1.2;

    # Enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    ssl_stapling on;
    ssl_trusted_certificate /etc/nginx/example.com.crt;
    resolver 8.8.8.8 208.67.222.222 valid=300s;
    resolver_timeout 10s;

    # For ssl client certificates, edit ssl_client_certificate
    # (specifies a file containing permissable CAs) and uncomment the
    # following:
    #ssl_verify_client optional;
    #ssl_client_certificate /etc/ssl/ca.crt

    server_name  example.com;
    location / {
        # Uncomment to route requests through Tor.
        # proxy_pass  http://127.0.0.1:8118;
        # proxy_set_header Host $server_id.onion;
        # proxy_read_timeout 2000;
        
        if ($host ~* (.*).example.com) {
            set $server_id $1;
        }
	
	# Add HTTPS Strict Transport (HSTS) header
        # 31536000 == 1 year
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

        add_header X-Frame-Options DENY;

	# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	add_header X-XSS-Protection "1; mode=block";

	# This header defines a Content Security Policy (CSP) on supported browsers 
	# you can tell the browser that it can only download content from the domains you explicitly allow
	# http://www.w3.org/TR/CSP/
	# https://www.owasp.org/index.php/Content_Security_Policy
	add_header Content-Security-Policy "default-src 'self' https: wss:;";

	# This header enables Host Public Key Pinning (HPKP) on supported browsers
	# Backup PIN is mandatory.
	add_header Public-Key-Pins 'pin-sha256=""; pin-sha256=""; max-age=2592000; includeSubDomains';


    proxy_cache global;
    proxy_cache_valid  any 1h;
    proxy_cache_use_stale updating;

    }
}
}
